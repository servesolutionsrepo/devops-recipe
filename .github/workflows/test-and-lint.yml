name: Test and Lint

on:
  workflow_call:
    secrets:
      DOCKERHUB_USER:
        required: true
        description: "Docker Hub username"
      DOCKERHUB_TOKEN:
        required: true
        description: "Docker Hub token"

jobs:
  python:
    name: Python
    runs-on: ubuntu-22.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
      - name: Python flake8
        run: docker compose run --rm app sh -c "flake8"
     
  terraform:
    name: Terraform
    runs-on: ubuntu-22.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: set vars
        run: |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
            echo "staging" > .workspace
          fi
          # Export TF_WORKSPACE dynamically
          workspace=$(cat .workspace)
          echo "TF_WORKSPACE=$workspace" >> $GITHUB_ENV
          export TF_WORKSPACE=$workspace
      - name: Terraform lint
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
          TF_WORKSPACE: ${{ env.TF_WORKSPACE }} # Use the dynamically set workspace
        run: |
          workspace=$(cat .workspace)
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ init -backend=false
          docker compose run --rm terraform -chdir=setup/ validate
          docker compose run --rm terraform -chdir=setup/ fmt -check
          docker compose run --rm terraform -chdir=deploy/ validate
          docker compose run --rm terraform -chdir=deploy/ fmt -check
